1. Junit5를 이용하여 테스트 코드 작성방법

    * 테스트 코드 작성시 디렉토리는 프로덕션 코드와 동일하게 생성한다.

    (1). 컬렉션 객체 단언문(assetThat) 사용하여 검증하는 방법
        - 주어진 컬렉션 안의 item 들에서 name 이라는 프로퍼티를 추출한 후(extracting), 그 값을 검증

        <코드>
        val people = listOf(Person("A"), Person("B"))
        assertThat(people).extracting("name").containsExactlyInAnyOrder("A", "B") -- 순서는 검증하지 않는경우
        assertThat(people).extracting("name").containsExactly("A", "B") -- 순서도 검증하는 경우

    (2). 단언문(assetThat) 사용하여 원하는 예외가 발생하는지 검증하는 방법
        -  함수인 function1()를 실행했을 때 원하는 예외가 나오는지 검증

        <코드>
        val message = assertThrows<IllegalArgumentException> {
          function1()
        }.message
        assertThat(message).isEqualTo(" ") -- 예외 메세지도 검증 가능하다.

    (3). 데이터를 모두 지워주는 clean 함수 내부에 userLoanHistoryRepository가 없는 이유
        - userRepository.deleteAll()을 수행시 연관관계에 있는 자식 테이블까지 찾아서 모두 지워주기 때문이다.


2. first, last 함수
- first 함수 : 조건을 만족하는 첫번째 인자를 반환

<코드>
val names = listOf("Duke", "Leonardo", "Sara", "James", "Mino")
println(names.first{name -> name.length > 4})

<결과> : Duke

- last 함수 : 조건을 만족하는 마지막 인자를 반환

<코드>
val names = listOf("Duke", "Leonardo", "Sara", "James", "Mino")
println(names.last{name -> name.length > 4})

<결과> : James
